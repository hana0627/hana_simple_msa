version: '3.9'

# docker compose -f compose.override.yml up -d --build
services:

  discovery-service:
    container_name: discovery-service
    build: /DiscoveryService
    ports:
      - "8761:8761"
    networks:
      - hana-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      KEY_STORE_PASSWORD: ${KEY_STORE_PASSWORD}
      SPRING_PROFILES_ACTIVE: local

  apigateway-service:
    container_name: apigateway-service
    build: /APIGateway
    ports:
      - "8000:8000"
    networks:
      - hana-network
    depends_on:
      discovery-service:
        condition: service_healthy
    environment:
      SECRET_KEY: ${SECRET_KEY}
      SPRING_PROFILES_ACTIVE: local

  user-service:
    container_name: user-service
    build: /UserService
    ports:
      - "0:8080"
    networks:
      - hana-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      MYSQL_URL: ${MYSQL_URL}
      MYSQL_USERNAME: ${MYSQL_USERNAME}
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SPRING_PROFILES_ACTIVE: local

  board-service:
    container_name: board-service
    build: /BoardService
    ports:
      - "0:8080"
    networks:
      - hana-network
    depends_on:
      postgres:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      SPRING_PROFILES_ACTIVE: local

  mysql:
    container_name: mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE_NAME}
    volumes:
      - ${MYSQL_VOLUME_PATH}:/var/lib/mysql
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    networks:
      - hana-network
    healthcheck:
      test: [ "CMD","mysqladmin","ping" ]
      interval: 5s
      retries: 10

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    volumes:
      - ${POSTGRES_VOLUME_PATH}:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT}:5432"
    networks:
      - hana-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 10

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"
    networks:
      - hana-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 10

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - hana-network
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    networks:
      - hana-network
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ${POSTGRES_VOLUME_PATH}:/var/run/docker.sock


networks:
  hana-network:
    driver: bridge
